@page "/products/create"
@page "/products/edit/{id:int}"
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IFileUpload _fileUpload
@inject IJSRuntime _JsRuntime;
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title a product</h3>
    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif" />
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="CreateOrUpdateProduct">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Brand</label>
                    <InputText @bind-Value="Product.Brand" class="form-control" />
                    <ValidationMessage For="() => Product.Brand" />
                </div>
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control" />
                    <ValidationMessage For="() => Product.Name" />
                </div>
                <div class="form-group">
                    <label>Color</label>
                    <InputText @bind-Value="Product.Color" class="form-control" />
                    <ValidationMessage For="() => Product.Color" />
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <SfRichTextEditor @bind-Value="Product.Description">
                    </SfRichTextEditor>
                    <ValidationMessage For="() => Product.Description" />
                </div>
                <div class="row pt-3">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.StoreFavorite" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Store Favorite</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorite" class="form-check-input"></InputCheckbox>
                            <label class="form-check-label">Customer Favorite</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <label>Category</label>
                        <InputSelect @bind-Value="Product.CategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected>--- Select Category ---</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="()=>Product.CategoryId"></ValidationMessage>
                        <div class="form-group col-6">
                            <InputFile OnChange="HandleImageUpload"></InputFile>
                        </div>
                    </div>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="products" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
    <div class="col-md-2">
        <img src="@Product.ImageUrl" class="w-100" />
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private ProductDTO Product { get; set; } = new()
    {
        ImageUrl = "/images/default.png"    
    };

    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; }
    public string OldImageUrl { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await LoadProduct();
    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await _categoryRepository.GetAll();

        if (Id != 0)
        {
            Title = "Update";
            Product = await _productRepository.Get(Id);
            OldImageUrl = Product.ImageUrl!;
        }

        IsLoading = false;
        StateHasChanged();
    }

    private async Task CreateOrUpdateProduct()
    {
        if (Product.Id == 0)
        {
            // Create
            await _productRepository.Create(Product);
            await _JsRuntime.ToastrSuccess("Product added.");
        }
        else
        {
            // Update
            if (OldImageUrl != Product.ImageUrl)
            {
               _fileUpload.DeleteFile(OldImageUrl);
            }

            await _productRepository.Update(Product);
            await _JsRuntime.ToastrSuccess("Product successfully updated.");

        }
        _navigationManager.NavigateTo("products");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs ev)
    {
        IsLoading = true;
        try
        {
            if (ev.GetMultipleFiles().Count > 0)
            {
                foreach (var file in ev.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".jpeg" ||
                        fileInfo.Extension.ToLower() == ".png")
                    {
                        // Uploads file of type IBrowserFile.. From FileUpload service
                        Product.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _JsRuntime.ToastrError("Image type must be .jpg, .jpeg, or .png.");
                        return;
                    }
                }
            }
            IsLoading = false;
        }
        catch(Exception ex)
        {
            await _JsRuntime.ToastrError(ex.Message);
        }
    }
}