@page "/products"
@inject IProductRepository _productRepository
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileUpload
@inject NavigationManager _navigationManager
@*@attribute [Authorize]*@

<_DeleteConfirmation ConfirmationChanged="ConfirmDelete" IsParentComponentProcessing="IsLoading"></_DeleteConfirmation>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info">Products</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="products/create" class="btn btn-info form-control">Add a product</a>
    </div>
    <div class="col-12">
        @if (Products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Brand</th>
                        <th>Model</th>
                        <th>Store Favorite</th>
                        <th>Customer Favorite</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Products)
                    {
                        <tr>
                            <td>@product.Brand</td>
                            <td>@product.Name</td>
                            <td>
                                <input type="checkbox" disabled checked="@product.StoreFavorite" />
                            </td>
                            <td>
                                <input type="checkbox" disabled checked="@product.CustomerFavorite" />
                            </td>
                            <td>
                                @product.Category.Name
                            </td>
                            <td>
                                <NavLink href="@($"/products/edit/{product.Id}")" class="btn btn-primary">Edit</NavLink>
                                <NavLink href="@($"/products/price/{product.Id}")" class="btn btn-secondary">Price</NavLink>
                                <button class="btn btn-danger" @onclick="() => HandleDelete(product.Id)">Delete</button>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            @if (IsLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif" />
                </div>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool IsLoading { get; set; }
    private int DeleteProductId { get; set; } = 0;


    /* AuthenticationState gives access to whether a user is authenticated or not.
     * It is handled in OnInitializedAsync() method here.
    */
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        /* Redirects unauthorized users to the login page. */
        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
         /* - The OnPostAsync() method in Login.cshtml.cs checks for the returnUrl in the 
                link and routes there or to the homepage depending on whether or not its empty.
            - forceLoad: true must be added because in this case the Blazor page is 
                redirecting to a Razor page.  */
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await LoadProducts();
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async Task ConfirmDelete(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteProductId != 0)
        {
            ProductDTO product = await _productRepository.Get(DeleteProductId);

            if (product.ImageUrl != null && !product.ImageUrl.Contains("default.png"))
            {
                _fileUpload.DeleteFile(product.ImageUrl);
            }

            await _productRepository.Delete(DeleteProductId);
            await _jsRuntime.ToastrSuccess("Product successfully deleted.");
            await LoadProducts();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }

}