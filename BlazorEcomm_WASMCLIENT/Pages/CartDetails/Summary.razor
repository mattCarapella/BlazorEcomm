@page "/summary"
@using BlazorEcomm_COMMON
@using Blazored.LocalStorage;
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject IJSRuntime _jsRuntime

@if (IsProcessing)
{
    <div style="position: fixed; top: 50%; left: 50%; margin-top: -50px; margin-left: -100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    <div class="mt-4 mx-4 px-md-5 mx-md-5 p-1">
        <div class="row p-2 my-3">
            <div class="col-12 col-lg-7 p-4">
                <div class="row px-2 text-success ">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Order Summary</p></div>
                    <div class="col-4 p-0" style="text-align:right">
                        <a href="/cart" class="btn btn-secondary btn-block">Back to cart</a>
                    </div>
                </div>
                @foreach (var product in Order.OrderDetails)
                {
                    <div class="row border p-1 m-1">
                        <div class="col-3 col-md-2 ">
                            <img src="@product.Product.ImageUrl" class="w-100">
                        </div>
                        <div class="col-5 col-md-5 ">
                            <span class="">Product: @product.ProductName </span><br />
                            <span class="pt-1">Size: @product.Size </span><br />
                            <span class="pt-1">Price: @product.Price </span><br />
                            <span class="pt-1">Count: @product.Count </span><br />
                        </div>
                        <div class="col-4 col-md-5 " style="text-align:right;">
                            <h4 class="text-warning font-weight-bold pt-2">
                                <span style="border-bottom:1px solid #ff6a00">
                                    @((product.Count * product.Price).ToString("c")) <em>(USD)</em>
                                </span>
                            </h4>
                        </div>
                    </div>
                }

                <div class="row" style="text-align:right">
                    <div class="col-12 px-3">
                        @*THIS IS NOT UPDATING (149)*@
                        <h3> Order Total : <span class="text-secondary">@Order.OrderHeader.OrderTotal.ToString("c")</span> </h3>
                    </div>
                </div>
            </div>

            @*Enter Details form*@
            <div class="col-12 col-lg-5 p-4 ml-4 ml-md-0 mt-4 mt-md-0 border">
                <EditForm Model="Order.OrderHeader" method="post" OnValidSubmit="HandleCheckout">
                    <DataAnnotationsValidator />
                    <div class="row px-2 text-success border-bottom">
                        <div class="col-7 py-1">
                            <p style="font-size:x-large;margin:0px;">Enter Details</p>
                        </div>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">First Name</label>
                        <InputText @bind-Value="Order.OrderHeader.FirstName" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.FirstName"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Last Name</label>
                        <InputText @bind-Value="Order.OrderHeader.LastName" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.LastName"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Email</label>
                        <InputText @bind-Value="Order.OrderHeader.Email" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.Email"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Phone</label>
                        <InputText @bind-Value="Order.OrderHeader.PhoneNumber" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.PhoneNumber"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Address</label>
                        <InputText @bind-Value="Order.OrderHeader.Address_1" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.Address_1"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Address line 2 (optional)</label>
                        <InputText @bind-Value="Order.OrderHeader.Address_2" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.Address_2"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">City</label>
                        <InputText @bind-Value="Order.OrderHeader.City" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.City"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">State</label>
                        <InputText @bind-Value="Order.OrderHeader.State" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.State"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Country</label>
                        <InputText @bind-Value="Order.OrderHeader.Country" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.Country"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-warning">Postal Code</label>
                        <InputText @bind-Value="Order.OrderHeader.PostalCode" type="text" class="form-control" />
                        <ValidationMessage For="()=>Order.OrderHeader.PostalCode"></ValidationMessage>
                    </div>
                    <div class="form-group pt-2">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private OrderDTO Order { get; set; } = new();
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool IsProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;

        /* Retrieve session and create an OrderDTO based on that */
        List<ShoppingCart> cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(StaticDetails.ShoppingCart);
        Products = await _productService.GetAll();
        Order = new()
        {
            OrderHeader = new()
            {
                OrderTotal = 0.0,
                Status = StaticDetails.STATUS_PENDING,
            },
            OrderDetails = new List<OrderDetailDTO>()
        };

        /* Iterate through each item in cart and populate order. */
        foreach (var item in cart)
        {
            ProductDTO product = Products.FirstOrDefault(p => p.Id == item.ProductId);
            ProductPriceDTO? productPrice = product!.ProductPrices.FirstOrDefault(pp => pp.Id == item.ProductPriceId);


            OrderDetailDTO orderDetailDTO = new()
                {
                    ProductId = item.ProductId,
                    ProductName = product.Name,
                    Product = product,
                    Price = productPrice!.Price,
                    Size = productPrice!.Size,
                    Count = item.Count,
                };

            /* Add order details to order and update total price */
            Order.OrderDetails.Add(orderDetailDTO);
            Order.OrderHeader.OrderTotal += (cart.Count * productPrice.Price);
        }

        IsProcessing = false;
    }

    private async Task HandleCheckout()
    {
        
    }
}
