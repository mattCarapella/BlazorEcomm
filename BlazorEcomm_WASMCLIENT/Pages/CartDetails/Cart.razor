@page "/cart"
@using BlazorEcomm_COMMON
@using Blazored.LocalStorage;
@inject IProductService _productService
@inject ICartService _cartService
@inject ILocalStorageService _localStorage

@if (IsProcessing)
{
    <div style="position: fixed; top: 50%; left: 50%; margin-top: -50px; margin-left: -100px;">
        <img src="images/ajax-loader.gif" />
    </div>
}
else
{
    @if (ShoppingCart is null || !ShoppingCart.Any())
    {
        <div class="container" style="width: auto; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="card text-center py-5" style="width: 50rem;">
                <div class="card-header">
                    <h2>Your cart is currently empty.</h2>
                </div>
                <div class="card-body">
                    <a href="/" class="btn btn-primary mt-4">Continue shopping</a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="container mt-4">
            <div class="card" style="border-radius: 25px;">
                <div class="card-header bg-dark text-light ml-0 ">
                    <div class="row">
                        <div class="col-6 pt-2">
                            <h5>Your Cart</h5>
                        </div>
                        <div class="col-6 col-md-3 offset-md-3 text-end">
                            <a href="/" class="btn btn-light form-control">Continue Shopping</a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @foreach (var item in ShoppingCart)
                    {
                        <div class="row">
                            <div class="col-3 col-md-1 text-center py-2">
                                <img src="@item.Product.ImageUrl" class="rounded w-100" />
                            </div>
                            <div class="col-9 text-sm-center text-md-start col-md-4 pt-lg-1">
                                <h4><strong>@item.Product.Name</strong></h4>
                                <div class="badge bg-primary text-center" style="font-size:12px;">
                                    @item.Product.Category.Name
                                </div>
                                <div class="badge bg-info text-center" style="font-size:12px;">
                                    @item.Product.Color
                                </div>
                                <div class="mt-2">
                                    <p>Size: <span class="fw-bold">@item.ProductPrice.Size</span></p>
                                </div>
                            </div>
                            <div class="col-12 text-sm-center col-md-7 text-md-start row  pt-lg-3 mt-3">
                                <div class="col-4 pt-1 ">
                                    <div class="row">
                                        <h6><strong>@item.ProductPrice.Price.ToString("c") (<span class="text-muted"> x @item.Count)</span></strong></h6>
                                    </div>
                                    <div class="row">
                                        <p class="text-muted">
                                            Total: <b>@((item.ProductPrice.Price * item.Count).ToString("c"))</b>
                                        </p>
                                    </div>
                                </div>
                                <div class="col-6 col-sm-4 col-lg-6">
                                    <button @onclick="() => Increment(item.ProductId, item.ProductPriceId, 1)" type="submit" class="btn btn-primary" style="border-radius: 50%">
                                        <i class="bi bi-plus-square"></i>
                                    </button>
                                    <button @onclick="() => Decrement(item.ProductId, item.ProductPriceId, 1)" type="submit" class="btn btn-warning" style="border-radius: 50%">
                                        <i class="bi bi-dash-square"></i>
                                    </button>
                                </div>
                                <div class="col-2 col-sm-4 col-lg-2 text-right">
                                    <button @onclick="() => Decrement(item.ProductId, item.ProductPriceId, 1)" type="submit" class="btn btn-outline-danger" style="border-radius: 50%">
                                        <i class="bi bi-trash-fill"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <hr />
                    }
                    <hr />
                    <div class="row">
                        <div class="col-12 col-md-5">
                        </div>
                        <div class="col-12 col-md-6 offset-md-1 col-lg-4 offset-lg-3 pr-4">
                            <ul class="list-group">
                                <li class="list-group-item d-flex justify-content-between bg-light">
                                    <span class=""> Total (USD)</span>
                                    <strong class="">@OrderTotal.ToString("c")</strong>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="col-12  col-md-3 offset-md-9">
                        <a href="/summary" class="btn btn-secondary form-control">Summary</a>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<ShoppingCart> ShoppingCart = new List<ShoppingCart>();
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool IsProcessing { get; set; } = false;
    private double OrderTotal { get; set; } = 0.0;

    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        Products = await _productService.GetAll();
        await LoadCart();
        IsProcessing = false;
    }

    private async Task LoadCart()
    {
        OrderTotal = 0;
        ShoppingCart = await _localStorage.GetItemAsync<List<ShoppingCart>>(StaticDetails.ShoppingCart);

        if (ShoppingCart is not null)
        {
            // We need to populate ProductDTO and ProductPriceDTO nav properties using ProductService
            foreach (var cart in ShoppingCart)
            {
                cart.Product = Products.FirstOrDefault(p => p.Id == cart.ProductId);
                cart.ProductPrice = cart.Product.ProductPrices.FirstOrDefault(p => p.Id == cart.ProductPriceId);
                if (cart.ProductPrice is not null) OrderTotal += (cart.ProductPrice.Price * cart.Count);
            }
        }
    }

    private async Task Increment(int productId, int productPriceId, int count)
    {
        IsProcessing = true;
        await _cartService.IncrementCart(new()
        {
            Count = count,
            ProductId = productId,
            ProductPriceId = productPriceId
        });
        IsProcessing = false;
        await LoadCart();
    }

    private async Task Decrement(int productId, int productPriceId, int count)
    {
        IsProcessing = true;
        await _cartService.DecrementCart(new()
        {
            Count = count,
            ProductId = productId,
            ProductPriceId = productPriceId
        });
        IsProcessing = false;
        await LoadCart();
    }
}